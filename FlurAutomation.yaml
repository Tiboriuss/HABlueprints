blueprint:
  name: Flur Doppel-Beleuchtungsautomatisierung mit Präsenzsteuerung
  description: >
    Steuert zwei Flurlichter (Tag und Nacht) basierend auf einem Anwesenheitssensor und Zeitbedingungen.
    Ein Licht wird tagsüber verwendet und ein anderes nachts. Die Lichter schalten sich ein, wenn Anwesenheit 
    erkannt wird, und aus, wenn keine Anwesenheit mehr erkannt wird. v4
  domain: automation
  input:
    presence_sensor:
      name: Anwesenheitssensor
      description: Der Binärsensor, der Anwesenheit im Flur erkennt
      selector:
        entity:
          domain: binary_sensor
    presence_on_state:
      name: Anwesenheitsstatus (Ein)
      description: Der Status des Sensors, der Anwesenheit anzeigt (normalerweise "on")
      default: "on"
      selector:
        text:
    presence_off_state:
      name: Anwesenheitsstatus (Aus)
      description: Der Status des Sensors, der keine Anwesenheit anzeigt (normalerweise "off")
      default: "off"
      selector:
        text:
    day_light:
      name: Tageslicht
      description: Das Licht, das tagsüber verwendet wird
      selector:
        entity:
          domain: light
    night_light:
      name: Nachtlicht
      description: Das Licht oder der Schalter, der nachts verwendet wird
      selector:
        entity:
          domain:
            - light
            - switch
    day_start_time:
      name: Tagesbeginn
      description: Zeitpunkt, zu dem die Tagesperiode beginnt
      default: "07:00:00"
      selector:
        time:
    day_end_time:
      name: Tagesende
      description: Zeitpunkt, zu dem die Tagesperiode endet
      default: "22:00:00"
      selector:
        time:

# Definiere die Automatisierungsauslöser, Bedingungen und Aktionen
trigger:
  - platform: state
    entity_id: !input presence_sensor

condition: []

action:
  - choose:
      # Wenn Anwesenheit erkannt wird (Sensor = ON)
      - conditions:
          - condition: template
            value_template: "{{ states(trigger.entity_id) == input.presence_on_state }}"
        sequence:
          - choose:
              # Tageslicht während der Tageszeit einschalten
              - conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
                sequence:
                  - service: light.turn_on
                    entity_id: !input day_light
              # Nachtlicht während der Nachtzeit einschalten
              - conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
                sequence:
                  - choose:
                      # Wenn Nachtlicht eine Lichtentität ist
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.night_light }}"
                        sequence:
                          - service: light.turn_on
                            entity_id: !input night_light
                    default:
                      # Wenn Nachtlicht eine Schaltentität ist
                      - service: switch.turn_on
                        entity_id: !input night_light
      # Wenn keine Anwesenheit mehr erkannt wird (Sensor = OFF)
      - conditions:
          - condition: template
            value_template: "{{ states(trigger.entity_id) == input.presence_off_state }}"
        sequence:
          - choose:
              # Tageslicht während der Tageszeit ausschalten
              - conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
                sequence:
                  - service: light.turn_off
                    entity_id: !input day_light
              # Nachtlicht während der Nachtzeit ausschalten
              - conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
                sequence:
                  - choose:
                      # Wenn Nachtlicht eine Lichtentität ist
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.night_light }}"
                        sequence:
                          - service: light.turn_off
                            entity_id: !input night_light
                    default:
                      # Wenn Nachtlicht eine Schaltentität ist
                      - service: switch.turn_off
                        entity_id: !input night_light