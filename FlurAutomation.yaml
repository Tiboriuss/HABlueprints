blueprint:
  name: Flur Doppel-Beleuchtungsautomatisierung mit Sensor-Steuerung
  description: >
    Steuert zwei Flurlichter (Tag und Nacht) basierend auf einem Anwesenheitssensor, einem Kontrollsensor und Zeitbedingungen.
    Ein Licht wird tagsüber verwendet und ein anderes nachts. Der Zustand des Kontrollsensors bestimmt, ob die Lichter ein- oder ausgeschaltet werden. v2
  domain: automation
  input:
    presence_sensor:
      name: Anwesenheitssensor
      description: Der Binärsensor, der Anwesenheit im Flur erkennt
      selector:
        entity:
          domain: binary_sensor
    presence_state:
      name: Anwesenheitsstatus
      description: Der Status des Sensors, der Anwesenheit anzeigt (normalerweise "on")
      default: "on"
      selector:
        text:
    control_sensor:
      name: Kontrollsensor
      description: Der Sensor, dessen Zustand bestimmt, ob die Lichter ein- oder ausgeschaltet werden
      selector:
        entity:
          domain: sensor
    control_on_state:
      name: Einschalt-Zustand
      description: Der Zustand des Kontrollsensors, bei dem die Lichter eingeschaltet werden sollen
      default: "on"
      selector:
        text:
    control_off_state:
      name: Ausschalt-Zustand
      description: Der Zustand des Kontrollsensors, bei dem die Lichter ausgeschaltet werden sollen
      default: "off"
      selector:
        text:
    day_light:
      name: Tageslicht
      description: Das Licht, das tagsüber verwendet wird
      selector:
        entity:
          domain: light
    night_light:
      name: Nachtlicht
      description: Das Licht oder der Schalter, der nachts verwendet wird
      selector:
        entity:
          domain:
            - light
            - switch
    day_start_time:
      name: Tagesbeginn
      description: Zeitpunkt, zu dem die Tagesperiode beginnt
      default: "07:00:00"
      selector:
        time:
    day_end_time:
      name: Tagesende
      description: Zeitpunkt, zu dem die Tagesperiode endet
      default: "22:00:00"
      selector:
        time:

# Definiere die Automatisierungsauslöser, Bedingungen und Aktionen
trigger:
  - platform: state
    entity_id: !input presence_sensor
  - platform: state
    entity_id: !input control_sensor

condition: []

action:
  - choose:
      # Wenn der Kontrollsensor auf "Ein" steht und Anwesenheit erkannt wird
      - conditions:
          - condition: template
            value_template: "{{ states(trigger.entity_id) == input.presence_state or states(input.presence_sensor) == input.presence_state }}"
          - condition: template
            value_template: "{{ states(input.control_sensor) == input.control_on_state }}"
          - condition: or
            conditions:
              # Tageszeitbedingungen
              - condition: and
                conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
              # Nachtzeitbedingungen
              - condition: and
                conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
        sequence:
          - choose:
              # Tageslicht während der Tageszeit einschalten
              - conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input day_light
              # Nachtlicht während der Nachtzeit einschalten
              - conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
                sequence:
                  - choose:
                      # Wenn Nachtlicht eine Lichtentität ist
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.night_light }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: !input night_light
                    default:
                      # Wenn Nachtlicht eine Schaltentität ist
                      - service: switch.turn_on
                        target:
                          entity_id: !input night_light
      # Wenn der Kontrollsensor auf "Aus" steht
      - conditions:
          - condition: template
            value_template: "{{ states(input.control_sensor) == input.control_off_state }}"
        sequence:
          - choose:
              # Tageslicht während der Tageszeit ausschalten
              - conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input day_light
              # Nachtlicht während der Nachtzeit ausschalten
              - conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
                sequence:
                  - choose:
                      # Wenn Nachtlicht eine Lichtentität ist
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.night_light }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input night_light
                    default:
                      # Wenn Nachtlicht eine Schaltentität ist
                      - service: switch.turn_off
                        target:
                          entity_id: !input night_light