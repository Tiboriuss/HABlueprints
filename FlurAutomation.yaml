blueprint:
  name: Dual Light Presence Controller
  description: >
    Controls two lights (day and night) based on a presence sensor and time conditions.
    One light is used during the day and another during the night. The lights turn on when 
    presence is detected and off when presence is no longer detected. Supports both lights and relays/switches. v1
  domain: automation
  input:
    presence_sensor:
      name: Presence Sensor
      description: The binary sensor that detects presence
      selector:
        entity:
          domain: binary_sensor
    presence_on_state:
      name: Presence State (On)
      description: The state of the sensor that indicates presence (usually "on")
      default: "on"
      selector:
        text:
    presence_off_state:
      name: Presence State (Off)
      description: The state of the sensor that indicates no presence (usually "off")
      default: "off"
      selector:
        text:
    day_light:
      name: Day Light/Relay
      description: The light or switch that is used during the day
      selector:
        entity:
          domain:
            - light
            - switch
    night_light:
      name: Night Light/Relay
      description: The light or switch that is used during the night
      selector:
        entity:
          domain:
            - light
            - switch
    day_start_time:
      name: Day Start Time
      description: Time when the day period begins
      default: "07:00:00"
      selector:
        time:
    day_end_time:
      name: Day End Time
      description: Time when the day period ends
      default: "22:00:00"
      selector:
        time:

# Define automation triggers, conditions, and actions
trigger:
  - platform: state
    entity_id: !input presence_sensor

condition: []

action:
  - choose:
      # When presence is detected (Sensor = ON)
      - conditions:
          - condition: template
            value_template: "{{ states(trigger.entity_id) == input.presence_on_state }}"
        sequence:
          - choose:
              # Turn on day light during day time
              - conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
                sequence:
                  - choose:
                      # If day light is a light entity
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.day_light }}"
                        sequence:
                          - service: light.turn_on
                            entity_id: !input day_light
                    default:
                      # If day light is a switch entity
                      - service: switch.turn_on
                        entity_id: !input day_light
              # Turn on night light during night time
              - conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
                sequence:
                  - choose:
                      # If night light is a light entity
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.night_light }}"
                        sequence:
                          - service: light.turn_on
                            entity_id: !input night_light
                    default:
                      # If night light is a switch entity
                      - service: switch.turn_on
                        entity_id: !input night_light
      # When presence is no longer detected (Sensor = OFF)
      - conditions:
          - condition: template
            value_template: "{{ states(trigger.entity_id) == input.presence_off_state }}"
        sequence:
          - choose:
              # Turn off day light during day time
              - conditions:
                  - condition: time
                    after: !input day_start_time
                    before: !input day_end_time
                sequence:
                  - choose:
                      # If day light is a light entity
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.day_light }}"
                        sequence:
                          - service: light.turn_off
                            entity_id: !input day_light
                    default:
                      # If day light is a switch entity
                      - service: switch.turn_off
                        entity_id: !input day_light
              # Turn off night light during night time
              - conditions:
                  - condition: or
                    conditions:
                      - condition: time
                        after: !input day_end_time
                      - condition: time
                        before: !input day_start_time
                sequence:
                  - choose:
                      # If night light is a light entity
                      - conditions:
                          - condition: template
                            value_template: "{{ 'light.' in input.night_light }}"
                        sequence:
                          - service: light.turn_off
                            entity_id: !input night_light
                    default:
                      # If night light is a switch entity
                      - service: switch.turn_off
                        entity_id: !input night_light